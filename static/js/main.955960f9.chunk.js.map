{"version":3,"sources":["context.js","TodoItem.js","TodoList.js","reducer.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","TodoItem","_ref","title","id","completed","dispatch","useContext","cls","push","react_default","a","createElement","className","join","type","onChange","payload","onClick","TodoList","todos","map","item","Object","assign","key","reducer","state","action","concat","toConsumableArray","Date","now","todo","filter","App","_useReducer","useReducer","JSON","parse","localStorage","getItem","_useReducer2","slicedToArray","_useState","useState","_useState2","todoTitle","setTodoTitle","useEffect","setItem","stringify","Provider","value","event","target","onKeyPress","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wKAEaA,EAAUC,IAAMC,gBCCd,SAASC,EAATC,GAA0C,IAAvBC,EAAuBD,EAAvBC,MAAOC,EAAgBF,EAAhBE,GAAIC,EAAYH,EAAZG,UAElCC,EAAYC,qBAAWT,GAAvBQ,SAEDE,EAAM,CAAC,QAMb,OAJIH,GACAG,EAAIC,KAAK,aAIbC,EAAAC,EAAAC,cAAA,MAAIC,UAAWL,EAAIM,KAAK,MACtBJ,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SACEG,KAAK,WACLV,UAAWA,EACXW,SAAU,kBAAMV,EAAS,CACrBS,KAAM,SACNE,QAASb,OAGfM,EAAAC,EAAAC,cAAA,YAAOT,GAEPO,EAAAC,EAAAC,cAAA,KACEC,UAAU,0BACVK,QAAS,kBAAMZ,EAAS,CACpBS,KAAM,SACNE,QAASb,MAJf,YCvBO,SAASe,EAATjB,GAA2B,IAARkB,EAAQlB,EAARkB,MAChC,OACEV,EAAAC,EAAAC,cAAA,UACGQ,EAAMC,IAAI,SAAAC,GAAI,OAAIZ,EAAAC,EAAAC,cAACX,EAADsB,OAAAC,OAAA,CAAUC,IAAKH,EAAKlB,IAAQkB,kBCNtCI,EAAA,SAASC,EAAOC,GAC3B,OAAQA,EAAOb,MACX,IAAK,MACD,SAAAc,OAAAN,OAAAO,EAAA,EAAAP,CACOI,GADP,CAEI,CACIvB,GAAI2B,KAAKC,MACT7B,MAAOyB,EAAOX,QACdZ,WAAW,KAGvB,IAAK,SACD,OAAOsB,EAAMN,IAAI,SAAAY,GAIb,OAHIA,EAAK7B,KAAOwB,EAAOX,UACnBgB,EAAK5B,WAAa4B,EAAK5B,WAEpB4B,IAEf,IAAK,SACD,OAAON,EAAMO,OAAO,SAAAD,GAAI,OAAIA,EAAK7B,KAAOwB,EAAOX,UACnD,QACI,OAAOU,IChBJ,SAASQ,IAAM,IAAAC,EACAC,qBAAWX,EAASY,KAAKC,MAC9CC,aAAaC,QAAQ,WAAa,IAFbC,EAAAnB,OAAAoB,EAAA,EAAApB,CAAAa,EAAA,GACnBT,EADmBe,EAAA,GACZpC,EADYoC,EAAA,GAAAE,EAGQC,mBAAS,IAHjBC,EAAAvB,OAAAoB,EAAA,EAAApB,CAAAqB,EAAA,GAGnBG,EAHmBD,EAAA,GAGRE,EAHQF,EAAA,GAK1BG,oBAAU,WACNT,aAAaU,QAAQ,QAASZ,KAAKa,UAAUxB,KAC9C,CAACA,IAaJ,OACIjB,EAAAC,EAAAC,cAACd,EAAQsD,SAAT,CAAkBC,MAAO,CAAC/C,aACtBI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,sBAEAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,SACIG,KAAK,OACLsC,MAAON,EACP/B,SAAU,SAAAsC,GAAK,OAAIN,EAAaM,EAAMC,OAAOF,QAC7CG,WArBJ,SAAAF,GACPP,GACa,UAAdO,EAAM7B,MACNnB,EAAS,CACLS,KAAM,MACNE,QAAS8B,IAEbC,EAAa,QAeLtC,EAAAC,EAAAC,cAAA,2BAGJF,EAAAC,EAAAC,cAACO,EAAD,CAAUC,MAAOO,YC3Bb8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACuB,EAAD,MAAS6B,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.955960f9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Context = React.createContext()","import React, {useContext} from 'react'\r\nimport {Context} from './context'\r\n\r\nexport default function TodoItem({title, id, completed}) {\r\n    \r\n    const {dispatch} = useContext(Context)\r\n\r\n    const cls = ['todo']\r\n\r\n    if (completed) {\r\n        cls.push('completed')\r\n    }\r\n\r\n    return (\r\n    <li className={cls.join(' ')}>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          completed={completed}\r\n          onChange={() => dispatch({\r\n              type: 'toggle',\r\n              payload: id\r\n          })}\r\n        />\r\n        <span>{title}</span>\r\n\r\n        <i\r\n          className=\"material-icons red-text\"\r\n          onClick={() => dispatch({\r\n              type: 'remove',\r\n              payload: id\r\n          })}\r\n        >\r\n          delete\r\n        </i>\r\n      </label>\r\n    </li>\r\n  )\r\n}","import React from 'react'\r\nimport TodoItem from './TodoItem'\r\n\r\nexport default function TodoList({todos}) {\r\n  return (\r\n    <ul>\r\n      {todos.map(item => <TodoItem key={item.id} {...item} />)}\r\n    </ul>\r\n  )\r\n}","export default function(state, action) {\r\n    switch (action.type) {\r\n        case 'add':\r\n            return [\r\n                ...state,\r\n                {\r\n                    id: Date.now(),\r\n                    title: action.payload,\r\n                    completed: false\r\n                }\r\n            ]\r\n        case 'toggle':\r\n            return state.map(todo => {\r\n                if (todo.id === action.payload) {\r\n                    todo.completed = !todo.completed\r\n                }\r\n                return todo\r\n            })\r\n        case 'remove':\r\n            return state.filter(todo => todo.id !== action.payload)\r\n        default:\r\n            return state\r\n    }\r\n}","import React, { useState, useEffect, useReducer } from 'react'\r\nimport TodoList from './TodoList'\r\nimport { Context } from './context'\r\nimport reducer from './reducer'\r\n\r\nexport default function App() {\r\n    const [state, dispatch] = useReducer(reducer, JSON.parse\r\n        (localStorage.getItem('todos')) || [])\r\n    const [todoTitle, setTodoTitle] = useState('')\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('todos', JSON.stringify(state))\r\n    }, [state])\r\n\r\n    const addTodo = event => {\r\n        if (!todoTitle) return\r\n        if (event.key === 'Enter') {\r\n            dispatch({\r\n                type: 'add',\r\n                payload: todoTitle\r\n            })\r\n            setTodoTitle('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Context.Provider value={{dispatch}}>\r\n            <div className=\"container\">\r\n                <h1>Todo app</h1>\r\n\r\n                <div className=\"input-field\">\r\n                    <input\r\n                        type=\"text\"\r\n                        value={todoTitle}\r\n                        onChange={event => setTodoTitle(event.target.value)}\r\n                        onKeyPress={addTodo} />\r\n                    <label>Todo name</label>\r\n                </div>\r\n\r\n                <TodoList todos={state} />\r\n            </div>\r\n        </Context.Provider>\r\n    )\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'materialize-css'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}